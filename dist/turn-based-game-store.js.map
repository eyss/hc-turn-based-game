{"version":3,"file":"turn-based-game-store.js","sourceRoot":"","sources":["../src/turn-based-game-store.ts"],"names":[],"mappings":";;AAAA,OAAO,EAKL,aAAa,GACd,MAAM,gCAAgC,CAAC;AAExC,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAY,MAAM,cAAc,CAAC;AAShE,MAAM,OAAO,kBAAkB;IAuB7B,YACY,oBAA0C,EAC7C,aAA4B;QADzB,yBAAoB,GAApB,oBAAoB,CAAsB;QAC7C,kBAAa,GAAb,aAAa,CAAe;QAxBrC,+CAAwD,QAAQ,CAAC,EAAE,CAAC,EAAC;QAM9D,YAAO,GAAG,OAAO,CAAC,uBAAA,IAAI,4CAAkB,EAAE,KAAK,CAAC,EAAE;YACvD,MAAM,OAAO,GAA0B,EAAE,CAAC;YAE1C,KAAK,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBAChD,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;oBACnD,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;iBAC5B;aACF;YAED,OAAO,OAAO,CAAC;QACjB,CAAC,CAAC,CAAC;QAUD,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE;YAC7D,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,aAAa,EAAE;gBAC9C,IAAI,CAAC,oBAAoB,CACvB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAC7B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAC/B,CAAC;aACH;iBAAM,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,SAAS,EAAE;gBACjD,IAAI,CAAC,aAAa,CAChB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAC/B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CACpC,CAAC;aACH;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IArCM,IAAI,CAAC,QAAsB;QAChC,OAAO,OAAO,CAAC,uBAAA,IAAI,4CAAkB,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;IACnE,CAAC;IAcD,IAAW,aAAa;QACtB,OAAO,aAAa,CAAC,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACvE,CAAC;IAqBD,QAAQ,CAAC,IAAe;QACtB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,aAAa,CAAmB,CAAC;IAC5E,CAAC;IAED,sBAAsB;IAEtB,KAAK,CAAC,SAAS,CAAC,QAAsB;QACpC,6DAA6D;QAC7D,MAAM,KAAK,GAAG,GAAG,CAAC,uBAAA,IAAI,4CAAkB,CAAC,CAAC;QAE1C,IAAI,KAAK,CAAC,QAAQ,CAAC;YAAE,OAAO;QAE5B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAE/D,uBAAA,IAAI,4CAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YACpC,KAAK,CAAC,QAAQ,CAAC,GAAG;gBAChB,KAAK,EAAE,IAAI;gBACX,KAAK,EAAE,EAAE;aACV,CAAC;YAEF,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,mBAAmB;QACvB,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,EAAE,CAAC;QAE3E,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CACzD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CACpB,CAAC;QAEF,MAAM,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;QAExD,uBAAA,IAAI,4CAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YACpC,KAAK,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;gBACzD,KAAK,CAAC,IAAI,CAAC,GAAG;oBACZ,KAAK,EAAE,IAAI;oBACX,KAAK,EAAE,EAAE;iBACV,CAAC;aACH;YAED,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,QAAsB,EAAE,IAAO;QAC5C,MAAM,IAAI,GAAG,GAAG,CAAC,uBAAA,IAAI,4CAAkB,CAAC,CAAC,QAAQ,CAAC,CAAC;QAEnD,IAAI,CAAC,IAAI;YACP,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;QAExE,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QACvC,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;QAClD,MAAM,gBAAgB,GAAG,YAAY;YACnC,CAAC,CAAC,YAAY,CAAC,WAAW;YAC1B,CAAC,CAAC,SAAS,CAAC;QAEd,MAAM,UAAU,GAAqB;YACnC,cAAc,EAAE,IAAI,CAAC,aAAa;YAClC,SAAS,EAAE,QAAQ;YACnB,SAAS,EAAE,IAAI;YACf,kBAAkB,EAAE,gBAAgB;SACrC,CAAC;QACF,MAAM,CAAC,GAAgB;YACrB,WAAW,EAAE,SAAgB;YAC7B,eAAe,EAAE,UAAU;SAC5B,CAAC;QAEF,uBAAA,IAAI,4CAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YACpC,KAAK,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9B,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAC1D,QAAQ,EACR,gBAAgB,EAChB,IAAI,CACL,CAAC;QAEF,uBAAA,IAAI,4CAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YACpC,KAAK,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,WAAW,GAAG,WAAW,CAAC;YAC9D,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,QAAsB;QACzC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAErE,uBAAA,IAAI,4CAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YACpC,KAAK,CAAC,QAAQ,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBACtC,WAAW,EAAE,CAAC,CAAC,WAAW;gBAC1B,eAAe,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,eAAe,CAAC;aACpD,CAAC,CAAC,CAAC;YAEJ,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,oBAAoB,CAChC,SAAuB,EACvB,SAAoB;QAEpB,MAAM,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAEzE,uBAAA,IAAI,4CAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YACpC,KAAK,CAAC,SAAS,CAAC,GAAG;gBACjB,KAAK,EAAE,SAAS;gBAChB,KAAK,EAAE,EAAE;aACV,CAAC;YACF,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,aAAa,CACzB,cAA6B,EAC7B,QAA0B;QAE1B,MAAM,KAAK,GAAG,GAAG,CAAC,uBAAA,IAAI,4CAAkB,CAAC,CAAC;QAE1C,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YAC9B,gDAAgD;YAChD,OAAO;SACR;QAED,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAEvC,uBAAA,IAAI,4CAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YACpC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;gBACnC,WAAW,EAAE,cAAc;gBAC3B,eAAe,EAAE,IAAI;aACtB,CAAC,CAAC;YAEH,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,UAAU,CAAC,IAAwB;QACzC,OAAO;YACL,GAAG,IAAI;YACP,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAQ;SACzC,CAAC;IACJ,CAAC;CACF","sourcesContent":["import {\n  AgentPubKeyB64,\n  Dictionary,\n  EntryHashB64,\n  HeaderHashB64,\n  serializeHash,\n} from '@holochain-open-dev/core-types';\nimport { ProfilesStore } from '@holochain-open-dev/profiles';\nimport { decode } from '@msgpack/msgpack';\nimport { derived, get, writable, Writable } from 'svelte/store';\nimport { TurnBasedGameService } from './turn-based-game-service';\nimport { GameEntry, GameMoveEntry, MoveInfo } from './types';\n\nexport interface GameState<M> {\n  entry: GameEntry;\n  moves: Array<MoveInfo<M>>;\n}\n\nexport class TurnBasedGameStore<M> {\n  #gamesByEntryHash: Writable<Dictionary<GameState<M>>> = writable({});\n\n  public game(gameHash: EntryHashB64) {\n    return derived(this.#gamesByEntryHash, games => games[gameHash]);\n  }\n\n  public myGames = derived(this.#gamesByEntryHash, games => {\n    const myGames: Dictionary<GameEntry> = {};\n\n    for (const [hash, game] of Object.entries(games)) {\n      if (game.entry.players.includes(this.myAgentPubKey)) {\n        myGames[hash] = game.entry;\n      }\n    }\n\n    return myGames;\n  });\n\n  public get myAgentPubKey() {\n    return serializeHash(this.turnBasedGameService.cellClient.cellId[1]);\n  }\n\n  constructor(\n    protected turnBasedGameService: TurnBasedGameService,\n    public profilesStore: ProfilesStore\n  ) {\n    this.turnBasedGameService.cellClient.addSignalHandler(signal => {\n      if (signal.data.payload.type === 'GameStarted') {\n        this.handleNewGameStarted(\n          signal.data.payload.game_hash,\n          signal.data.payload.game_entry\n        );\n      } else if (signal.data.payload.type === 'NewMove') {\n        this.handleNewMove(\n          signal.data.payload.header_hash,\n          signal.data.payload.game_move_entry\n        );\n      }\n    });\n  }\n\n  opponent(game: GameEntry): AgentPubKeyB64 {\n    return game.players.find(p => p !== this.myAgentPubKey) as AgentPubKeyB64;\n  }\n\n  /** Backend actions */\n\n  async fetchGame(gameHash: EntryHashB64) {\n    // Game entries can't change, if we have it cached do nothing\n    const games = get(this.#gamesByEntryHash);\n\n    if (games[gameHash]) return;\n\n    const game = await this.turnBasedGameService.getGame(gameHash);\n\n    this.#gamesByEntryHash.update(games => {\n      games[gameHash] = {\n        entry: game,\n        moves: [],\n      };\n\n      return games;\n    });\n  }\n\n  async fetchMyCurrentGames() {\n    const myCurrentGames = await this.turnBasedGameService.getMyCurrentGames();\n\n    const opponents = Object.values(myCurrentGames).map(game =>\n      this.opponent(game)\n    );\n\n    await this.profilesStore.fetchAgentsProfiles(opponents);\n\n    this.#gamesByEntryHash.update(games => {\n      for (const [hash, game] of Object.entries(myCurrentGames)) {\n        games[hash] = {\n          entry: game,\n          moves: [],\n        };\n      }\n\n      return games;\n    });\n  }\n\n  async makeMove(gameHash: EntryHashB64, move: M): Promise<HeaderHashB64> {\n    const game = get(this.#gamesByEntryHash)[gameHash];\n\n    if (!game)\n      throw new Error('Error making a move: game has not been fetched yet');\n\n    const newMoveIndex = game.moves.length;\n    const previousMove = game.moves[newMoveIndex - 1];\n    const previousMoveHash = previousMove\n      ? previousMove.header_hash\n      : undefined;\n\n    const move_entry: GameMoveEntry<M> = {\n      author_pub_key: this.myAgentPubKey,\n      game_hash: gameHash,\n      game_move: move,\n      previous_move_hash: previousMoveHash,\n    };\n    const m: MoveInfo<M> = {\n      header_hash: undefined as any,\n      game_move_entry: move_entry,\n    };\n\n    this.#gamesByEntryHash.update(games => {\n      games[gameHash].moves.push(m);\n      return games;\n    });\n\n    const header_hash = await this.turnBasedGameService.makeMove(\n      gameHash,\n      previousMoveHash,\n      move\n    );\n\n    this.#gamesByEntryHash.update(games => {\n      games[gameHash].moves[newMoveIndex].header_hash = header_hash;\n      return games;\n    });\n\n    return header_hash;\n  }\n\n  async fetchGameMoves(gameHash: EntryHashB64) {\n    const moves = await this.turnBasedGameService.getGameMoves(gameHash);\n\n    this.#gamesByEntryHash.update(games => {\n      games[gameHash].moves = moves.map(m => ({\n        header_hash: m.header_hash,\n        game_move_entry: this.decodeMove(m.game_move_entry),\n      }));\n\n      return games;\n    });\n  }\n\n  private async handleNewGameStarted(\n    entryHash: EntryHashB64,\n    gameEntry: GameEntry\n  ) {\n    await this.profilesStore.fetchAgentsProfiles([this.opponent(gameEntry)]);\n\n    this.#gamesByEntryHash.update(games => {\n      games[entryHash] = {\n        entry: gameEntry,\n        moves: [],\n      };\n      return games;\n    });\n  }\n\n  private async handleNewMove(\n    moveHeaderHash: HeaderHashB64,\n    gameMove: GameMoveEntry<M>\n  ) {\n    const games = get(this.#gamesByEntryHash);\n\n    if (!games[gameMove.game_hash]) {\n      // We are not currently subscribing to this game\n      return;\n    }\n\n    const move = this.decodeMove(gameMove);\n\n    this.#gamesByEntryHash.update(games => {\n      games[gameMove.game_hash].moves.push({\n        header_hash: moveHeaderHash,\n        game_move_entry: move,\n      });\n\n      return games;\n    });\n  }\n\n  private decodeMove(move: GameMoveEntry<any>): GameMoveEntry<M> {\n    return {\n      ...move,\n      game_move: decode(move.game_move) as any,\n    };\n  }\n}\n"]}